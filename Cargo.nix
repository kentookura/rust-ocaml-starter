# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "rust-ocaml-starter/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  cargoUnstableFlags ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
  ignoreLockHash,
}:
let
  nixifiedLockHash = "ca1de1a7d707548a0b2b069f50b5ac52ecce196d4e4e0ef41e1554155adef046";
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
  currentLockHash = builtins.hashFile "sha256" (workspaceSrc + /Cargo.lock);
  lockHashIgnored = if ignoreLockHash
                  then builtins.trace "Ignoring lock hash" ignoreLockHash
                  else ignoreLockHash;
in if !lockHashIgnored && (nixifiedLockHash != currentLockHash) then
  throw ("Cargo.nix ${nixifiedLockHash} is out of sync with Cargo.lock ${currentLockHash}")
else let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts cargoUnstableFlags rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    rust-ocaml-starter = rustPackages.unknown.rust-ocaml-starter."0.1.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.83";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1174fb0b6ec23863f8b971027804a42614e347eafb0a95bf0b12cdae21fc4d0"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cty."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "cty";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.150";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "89d92a4743f9a61002fae18374ed11e7973f530cb3a3255fb354818118b2203c"; };
  });
  
  "git+https://github.com/crackcomm/ocaml-rs".ocaml."1.0.0-beta.5" = overridableMkRustCrate (profileName: rec {
    name = "ocaml";
    version = "1.0.0-beta.5";
    registry = "git+https://github.com/crackcomm/ocaml-rs";
    src = fetchCrateGit {
      url = https://github.com/crackcomm/ocaml-rs;
      name = "ocaml";
      version = "1.0.0-beta.5";
      rev = "b7055ab99e22c2bfc0b9f9294459b6b3f8cdaf1a";
      ref = "ocaml5-fortran";};
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      [ "ocaml-derive" ]
    ];
    dependencies = {
      ocaml_boxroot_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ocaml-boxroot-sys."0.3.0" { inherit profileName; }).out;
      ocaml_derive = (buildRustPackages."git+https://github.com/crackcomm/ocaml-rs".ocaml-derive."1.0.0-beta.5" { profileName = "__noProfile"; }).out;
      ocaml_interop = (rustPackages."git+https://github.com/crackcomm/ocaml-interop".ocaml-interop."0.8.8" { inherit profileName; }).out;
      ocaml_sys = (rustPackages."git+https://github.com/crackcomm/ocaml-rs".ocaml-sys."0.24.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ocaml-boxroot-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ocaml-boxroot-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0751001b9d2a77bbdb8f0bf79e40d2ade7937ae18ddc9ad3f0a62a4740f1d1eb"; };
    features = builtins.concatLists [
      [ "bundle-boxroot" ]
      [ "default" ]
    ];
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "git+https://github.com/crackcomm/ocaml-rs".ocaml-build."1.0.0-beta.5" = overridableMkRustCrate (profileName: rec {
    name = "ocaml-build";
    version = "1.0.0-beta.5";
    registry = "git+https://github.com/crackcomm/ocaml-rs";
    src = fetchCrateGit {
      url = https://github.com/crackcomm/ocaml-rs;
      name = "ocaml-build";
      version = "1.0.0-beta.5";
      rev = "b7055ab99e22c2bfc0b9f9294459b6b3f8cdaf1a";
      ref = "ocaml5-fortran";};
    features = builtins.concatLists [
      [ "cc" ]
      [ "dune" ]
    ];
    dependencies = {
      cc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/crackcomm/ocaml-rs".ocaml-derive."1.0.0-beta.5" = overridableMkRustCrate (profileName: rec {
    name = "ocaml-derive";
    version = "1.0.0-beta.5";
    registry = "git+https://github.com/crackcomm/ocaml-rs";
    src = fetchCrateGit {
      url = https://github.com/crackcomm/ocaml-rs;
      name = "ocaml-derive";
      version = "1.0.0-beta.5";
      rev = "b7055ab99e22c2bfc0b9f9294459b6b3f8cdaf1a";
      ref = "ocaml5-fortran";};
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/crackcomm/ocaml-interop".ocaml-interop."0.8.8" = overridableMkRustCrate (profileName: rec {
    name = "ocaml-interop";
    version = "0.8.8";
    registry = "git+https://github.com/crackcomm/ocaml-interop";
    src = fetchCrateGit {
      url = https://github.com/crackcomm/ocaml-interop;
      name = "ocaml-interop";
      version = "0.8.8";
      rev = "8be57fbaa22c9b1321b3c8bad7c93677631a17a7";
      ref = "boxroot030";};
    dependencies = {
      ocaml_boxroot_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ocaml-boxroot-sys."0.3.0" { inherit profileName; }).out;
      ocaml_sys = (rustPackages."git+https://github.com/crackcomm/ocaml-rs".ocaml-sys."0.24.0" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/crackcomm/ocaml-rs".ocaml-sys."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "ocaml-sys";
    version = "0.24.0";
    registry = "git+https://github.com/crackcomm/ocaml-rs";
    src = fetchCrateGit {
      url = https://github.com/crackcomm/ocaml-rs;
      name = "ocaml-sys";
      version = "0.24.0";
      rev = "b7055ab99e22c2bfc0b9f9294459b6b3f8cdaf1a";
      ref = "ocaml5-fortran";};
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      cty = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cty."0.2.2" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "134c189feb4956b20f6f547d2cf727d4c0fe06722b20a0eec87ed445a97f92da"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.33";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
    };
  });
  
  "unknown".rust-ocaml-starter."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rust-ocaml-starter";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      ocaml = (rustPackages."git+https://github.com/crackcomm/ocaml-rs".ocaml."1.0.0-beta.5" { inherit profileName; }).out;
      ocaml_derive = (buildRustPackages."git+https://github.com/crackcomm/ocaml-rs".ocaml-derive."1.0.0-beta.5" { profileName = "__noProfile"; }).out;
    };
    buildDependencies = {
      ocaml_build = (buildRustPackages."git+https://github.com/crackcomm/ocaml-rs".ocaml-build."1.0.0-beta.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "static_assertions";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "2.0.39";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23e78b90f2fcf45d3e842032ce32e3f2d1545ba6636271dcbf24fa306d87be7a"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" = overridableMkRustCrate (profileName: rec {
    name = "unicode-ident";
    version = "1.0.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b"; };
  });
  
}
